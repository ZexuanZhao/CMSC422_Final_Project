{"frames":[{"func":"neuralnet(dgp + dep ~ ., data = data_balanced, hidden = c(36, \n    24, 12), err.fct = \"ce\", linear.output = F, lifesign = \"full\", \n    rep = 1)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(1:rep, function(i) {\n    if (lifesign != \"none\") {\n        lifesign <- display(hidden, threshold, rep, i, lifesign)\n    } ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"calculate.neuralnet(learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, covariate = covariate, \n    response = response, data = data, model.list = model.list, \n    threshold = threshold, lifesign.step = lifesign.step, stepmax = stepmax,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"rprop(weights = weights, threshold = threshold, response = response, \n    covariate = covariate, learningrate.limit = learningrate.limit, \n    learningrate.factor = learningrate.factor, stepmax = stepmax, \n    lifesign = lifesign, lifesign.step = lifesign.step, act.fct = act.fct,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"calculate.gradients(weights = weights, length.weights = length.weights, \n    neurons = result$neurons, neuron.deriv = result$neuron.deriv, \n    err.deriv = err.deriv, exclude = exclude, linear.output = linear.output)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in base::try(new_data, silent = TRUE) : object 'new_data' not found\n"}